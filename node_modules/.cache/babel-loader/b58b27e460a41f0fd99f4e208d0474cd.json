{"ast":null,"code":"import ApiConstant from \"../constants/ApiConstant\";\nimport { routePath, sessionVariable } from \"../constants/variableConst\";\nimport { encrypt } from \"../util/crypto\";\nimport HttpClient from \"../util/httpClient\";\n\n/*\n * All function here is used for API calling.\n * @param {*} payload \n * @returns \n */\nexport async function addEvents(payload) {\n  try {\n    payload['sessionId'] = sessionStorage.getItem(sessionVariable.SESSION_ID);\n  } catch (err) {\n    payload['sessionId'] = \"\";\n  }\n  if (!payload['accountNo']) {\n    payload['accountNo'] = sessionStorage.getItem('mask');\n  }\n  return new Promise((resolve, reject) => {\n    HttpClient.post(`${ApiConstant}${routePath.ADD_LOG}`, {\n      \"payload\": encrypt(payload)\n    }).then(res => {\n      resolve(res);\n    }).catch(err => {\n      reject(err);\n    });\n  });\n}\nexport async function getPrevData(payload) {\n  return new Promise((resolve, reject) => {\n    HttpClient.post(`${ApiConstant}${routePath.GET_CUSTOMER_DETAILS}`, {\n      \"payload\": encrypt(payload)\n    }).then(res => {\n      resolve(res);\n    }).catch(err => {\n      reject(err);\n    });\n  });\n}\nexport async function srGeneration(payload) {\n  return new Promise((resolve, reject) => {\n    HttpClient.post(`${ApiConstant}${routePath.SR_GENERATE}`, {\n      \"payload\": encrypt(payload)\n    }).then(res => {\n      resolve(res);\n    }).catch(err => {\n      reject(err);\n    });\n  });\n}\nexport async function SRCallConnect(payload) {\n  return new Promise((resolve, reject) => {\n    HttpClient.post(`${ApiConstant}${routePath.KALERYA_CONNECT}`, {\n      \"payload\": encrypt(payload)\n    }).then(res => {\n      resolve(res);\n    }).catch(err => {\n      reject(err);\n    });\n  });\n}\n_c = SRCallConnect;\nexport async function SRCallStatus(payload) {\n  return new Promise((resolve, reject) => {\n    HttpClient.post(`${ApiConstant}${routePath.KALERYA_CONNECT_STATUS}`, {\n      \"payload\": payload\n    }).then(res => {\n      resolve(res);\n    }).catch(err => {\n      reject(err);\n    });\n  });\n}\n_c2 = SRCallStatus;\nvar _c, _c2;\n$RefreshReg$(_c, \"SRCallConnect\");\n$RefreshReg$(_c2, \"SRCallStatus\");","map":{"version":3,"names":["ApiConstant","routePath","sessionVariable","encrypt","HttpClient","addEvents","payload","sessionStorage","getItem","SESSION_ID","err","Promise","resolve","reject","post","ADD_LOG","then","res","catch","getPrevData","GET_CUSTOMER_DETAILS","srGeneration","SR_GENERATE","SRCallConnect","KALERYA_CONNECT","_c","SRCallStatus","KALERYA_CONNECT_STATUS","_c2","$RefreshReg$"],"sources":["/Users/bipinsingh/Desktop/datewise/21-10-24/ICICI_395_GOLD_LOAN_DC_FRONTEND/src/service/goldloanServiceApi.js"],"sourcesContent":["\nimport ApiConstant from \"../constants/ApiConstant\";\nimport { routePath, sessionVariable } from \"../constants/variableConst\";\nimport { encrypt } from \"../util/crypto\"\nimport HttpClient from \"../util/httpClient\"\n\n\n/*\n * All function here is used for API calling.\n * @param {*} payload \n * @returns \n */\nexport async function addEvents(payload) {\n    try {\n        payload['sessionId'] = sessionStorage.getItem(sessionVariable.SESSION_ID);\n    } catch (err) {\n        payload['sessionId'] = \"\";\n    }\n    if (!payload['accountNo']) {\n        payload['accountNo'] = sessionStorage.getItem('mask');\n    }\n    return new Promise((resolve, reject) => {\n        HttpClient.post(`${ApiConstant}${routePath.ADD_LOG}`, { \"payload\": encrypt(payload) })\n            .then((res) => {\n                resolve(res);\n            })\n            .catch((err) => {\n                reject(err);\n            })\n    })\n}\n\nexport async function getPrevData(payload) {\n    return new Promise((resolve, reject) => {\n        HttpClient.post(`${ApiConstant}${routePath.GET_CUSTOMER_DETAILS}`, { \"payload\": encrypt(payload) })\n            .then((res) => {\n                resolve(res);\n            })\n            .catch((err) => {\n                reject(err);\n            })\n    })\n}\n\nexport async function srGeneration(payload) {\n    return new Promise((resolve, reject) => {\n        HttpClient.post(`${ApiConstant}${routePath.SR_GENERATE}`, { \"payload\": encrypt(payload) })\n            .then((res) => {\n                resolve(res);\n            })\n            .catch((err) => {\n                reject(err);\n            })\n    })\n}\n\nexport async function SRCallConnect(payload) {\n    return new Promise((resolve, reject) => {\n        HttpClient.post(`${ApiConstant}${routePath.KALERYA_CONNECT}`, { \"payload\": encrypt(payload) })\n            .then((res) => {\n                resolve(res);\n            })\n            .catch((err) => {\n                reject(err);\n            })\n    })\n}\n\nexport async function SRCallStatus(payload) {\n    return new Promise((resolve, reject) => {\n        HttpClient.post(`${ApiConstant}${routePath.KALERYA_CONNECT_STATUS}`, { \"payload\": (payload) })\n            .then((res) => {\n                resolve(res);\n            })\n            .catch((err) => {\n                reject(err);\n            })\n    })\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}