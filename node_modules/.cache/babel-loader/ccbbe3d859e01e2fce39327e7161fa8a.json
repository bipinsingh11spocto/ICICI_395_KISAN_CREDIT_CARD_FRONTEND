{"ast":null,"code":"import CryptoJS from \"crypto-js\";\nimport crypto from 'crypto';\nconst algorithm = process.env.REACT_APP_CRYPTO_ALGORITHM;\n\n/*\n * This function encrypt/decrypt the data.\n * It is able to encrypt/decrypt all type of object, String, Number etc\n * @param {*} text\n * @returns \n */\nexport function encrypt(text) {\n  let enData = CryptoJS.AES.encrypt(JSON.stringify(text), process.env.REACT_APP_CRYPTO_SECRET_KEY).toString();\n  return enData;\n}\nexport function decrypt(hash) {\n  let decryptedData = JSON.parse(CryptoJS.AES.decrypt(hash, process.env.REACT_APP_CRYPTO_SECRET_KEY).toString(CryptoJS.enc.Utf8));\n  return decryptedData;\n}\n\n/*\n * This function encrypt/decrypt the data.\n * It is only accept String value to encrypt/decrypt.\n * It does not contains any special character, so we this encryption method in url link creation.\n * @param {*} text\n * @returns \n */\nexport function encryptLink(text) {\n  const cipher = crypto.createCipheriv(algorithm, process.env.REACT_APP_CRYPTO_SECRET_KEY, Buffer.from(process.env.REACT_APP_CRYPTO_SECRET_IV, 'hex'));\n  const encrypted = Buffer.concat([cipher.update(text), cipher.final()]);\n  return encrypted.toString('hex');\n}\n;\nexport function decryptlink(hash) {\n  const decipher = crypto.createDecipheriv(algorithm, process.env.REACT_APP_CRYPTO_SECRET_KEY, Buffer.from(process.env.REACT_APP_CRYPTO_SECRET_IV, 'hex'));\n  const decrpyted = Buffer.concat([decipher.update(Buffer.from(hash, 'hex')), decipher.final()]);\n  return decrpyted.toString();\n}\n;","map":{"version":3,"names":["CryptoJS","crypto","algorithm","process","env","REACT_APP_CRYPTO_ALGORITHM","encrypt","text","enData","AES","JSON","stringify","REACT_APP_CRYPTO_SECRET_KEY","toString","decrypt","hash","decryptedData","parse","enc","Utf8","encryptLink","cipher","createCipheriv","Buffer","from","REACT_APP_CRYPTO_SECRET_IV","encrypted","concat","update","final","decryptlink","decipher","createDecipheriv","decrpyted"],"sources":["/Users/bipinsingh/Desktop/datewise/21-10-24/ICICI_395_GOLD_LOAN_DC_FRONTEND/src/util/crypto.js"],"sourcesContent":["import CryptoJS from \"crypto-js\";\nimport crypto from 'crypto';\n\nconst algorithm = process.env.REACT_APP_CRYPTO_ALGORITHM;\n\n/*\n * This function encrypt/decrypt the data.\n * It is able to encrypt/decrypt all type of object, String, Number etc\n * @param {*} text\n * @returns \n */\nexport function encrypt(text) {\n    let enData = CryptoJS.AES.encrypt(JSON.stringify(text), process.env.REACT_APP_CRYPTO_SECRET_KEY).toString();\n    return (enData)\n}\n\nexport function decrypt(hash) {\n    let decryptedData = JSON.parse(CryptoJS.AES.decrypt(hash, process.env.REACT_APP_CRYPTO_SECRET_KEY).toString(CryptoJS.enc.Utf8));\n    return (decryptedData);\n}\n\n/*\n * This function encrypt/decrypt the data.\n * It is only accept String value to encrypt/decrypt.\n * It does not contains any special character, so we this encryption method in url link creation.\n * @param {*} text\n * @returns \n */\nexport function encryptLink(text) {\n    const cipher = crypto.createCipheriv(algorithm, process.env.REACT_APP_CRYPTO_SECRET_KEY, Buffer.from(process.env.REACT_APP_CRYPTO_SECRET_IV, 'hex'));\n    const encrypted = Buffer.concat([cipher.update(text), cipher.final()]);\n    return encrypted.toString('hex');\n};\n\nexport function decryptlink(hash) {\n    const decipher = crypto.createDecipheriv(algorithm, process.env.REACT_APP_CRYPTO_SECRET_KEY, Buffer.from(process.env.REACT_APP_CRYPTO_SECRET_IV, 'hex'));\n    const decrpyted = Buffer.concat([decipher.update(Buffer.from(hash, 'hex')), decipher.final()]);\n    return decrpyted.toString();\n};"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,WAAW;AAChC,OAAOC,MAAM,MAAM,QAAQ;AAE3B,MAAMC,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,0BAA0B;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAACC,IAAI,EAAE;EAC1B,IAAIC,MAAM,GAAGR,QAAQ,CAACS,GAAG,CAACH,OAAO,CAACI,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,EAAEJ,OAAO,CAACC,GAAG,CAACQ,2BAA2B,CAAC,CAACC,QAAQ,CAAC,CAAC;EAC3G,OAAQL,MAAM;AAClB;AAEA,OAAO,SAASM,OAAOA,CAACC,IAAI,EAAE;EAC1B,IAAIC,aAAa,GAAGN,IAAI,CAACO,KAAK,CAACjB,QAAQ,CAACS,GAAG,CAACK,OAAO,CAACC,IAAI,EAAEZ,OAAO,CAACC,GAAG,CAACQ,2BAA2B,CAAC,CAACC,QAAQ,CAACb,QAAQ,CAACkB,GAAG,CAACC,IAAI,CAAC,CAAC;EAC/H,OAAQH,aAAa;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,WAAWA,CAACb,IAAI,EAAE;EAC9B,MAAMc,MAAM,GAAGpB,MAAM,CAACqB,cAAc,CAACpB,SAAS,EAAEC,OAAO,CAACC,GAAG,CAACQ,2BAA2B,EAAEW,MAAM,CAACC,IAAI,CAACrB,OAAO,CAACC,GAAG,CAACqB,0BAA0B,EAAE,KAAK,CAAC,CAAC;EACpJ,MAAMC,SAAS,GAAGH,MAAM,CAACI,MAAM,CAAC,CAACN,MAAM,CAACO,MAAM,CAACrB,IAAI,CAAC,EAAEc,MAAM,CAACQ,KAAK,CAAC,CAAC,CAAC,CAAC;EACtE,OAAOH,SAAS,CAACb,QAAQ,CAAC,KAAK,CAAC;AACpC;AAAC;AAED,OAAO,SAASiB,WAAWA,CAACf,IAAI,EAAE;EAC9B,MAAMgB,QAAQ,GAAG9B,MAAM,CAAC+B,gBAAgB,CAAC9B,SAAS,EAAEC,OAAO,CAACC,GAAG,CAACQ,2BAA2B,EAAEW,MAAM,CAACC,IAAI,CAACrB,OAAO,CAACC,GAAG,CAACqB,0BAA0B,EAAE,KAAK,CAAC,CAAC;EACxJ,MAAMQ,SAAS,GAAGV,MAAM,CAACI,MAAM,CAAC,CAACI,QAAQ,CAACH,MAAM,CAACL,MAAM,CAACC,IAAI,CAACT,IAAI,EAAE,KAAK,CAAC,CAAC,EAAEgB,QAAQ,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;EAC9F,OAAOI,SAAS,CAACpB,QAAQ,CAAC,CAAC;AAC/B;AAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}