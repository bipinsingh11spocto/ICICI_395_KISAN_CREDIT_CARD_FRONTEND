{"ast":null,"code":"import { languageWithCode } from \"../constants/variableConst\";\n/*\n * This function return boolean value, wether page loading is true or false\n * @param {*} data=boolean\n */\nexport function pageLoading(data) {\n  document.getElementById(\"preloader\").style.display = data === true ? \"block\" : \"none\";\n}\n\n/*\n * This function return superscript for month\n * @param {*} dataA \n * @returns \n */\nexport function numberSub(dataA) {\n  const data = Number(dataA);\n  if (data === 1 || data === 21 || data === 31) {\n    return \"st\";\n  } else if (data === 2 || data === 22) {\n    return \"nd\";\n  } else if (data === 3 || data === 23) {\n    return \"rd\";\n  } else {\n    return \"th\";\n  }\n}\n\n/*\n * This function mask account no or mobile no.\n * Number of digit remains same in output with only last four digit visibale\n * @param {*} accountId \n * @returns \n */\nexport function maskAccountId(accountId) {\n  if (accountId) {\n    /** Condition will only executes if accountId is *not* undefined, null, empty, false or 0*/\n    const accountIdlength = accountId.length;\n    const maskedLength = accountIdlength - 5; /** Modify the length as per your wish */\n    let newString = accountId;\n    for (let i = 0; i < accountIdlength; i++) {\n      if (i < maskedLength) {\n        newString = newString.replace(accountId[i], 'X');\n      }\n    }\n    return newString;\n  } else return; /**Will handle if no string is passed */\n}\nexport function dateSeperated(resData) {\n  let expDateArr;\n  expDateArr = expDateArr = resData.split(\"-\");\n  return `${expDateArr[1].charAt(0).toUpperCase() + expDateArr[1].substring(1)} ${expDateArr[0]}, ${expDateArr[2].length < 4 ? \"20\" : \"\"}${expDateArr[2]}`;\n}\nexport function getLanguageFromCode(lanCode = 'en-IN') {\n  if (lanCode) {\n    return languageWithCode[lanCode];\n  } else return languageWithCode['en-IN'];\n}","map":{"version":3,"names":["languageWithCode","pageLoading","data","document","getElementById","style","display","numberSub","dataA","Number","maskAccountId","accountId","accountIdlength","length","maskedLength","newString","i","replace","dateSeperated","resData","expDateArr","split","charAt","toUpperCase","substring","getLanguageFromCode","lanCode"],"sources":["/Users/bipinsingh/Desktop/datewise/21-10-24/ICICI_395_GOLD_LOAN_DC_FRONTEND/src/util/global.js"],"sourcesContent":["import { languageWithCode } from \"../constants/variableConst\";\n/*\n * This function return boolean value, wether page loading is true or false\n * @param {*} data=boolean\n */\nexport function pageLoading(data) {\n    document.getElementById(\"preloader\").style.display = data === true ? \"block\" : \"none\";\n}\n\n/*\n * This function return superscript for month\n * @param {*} dataA \n * @returns \n */\nexport function numberSub(dataA) {\n    const data = Number(dataA)\n    if (data === 1 || data === 21 || data === 31) {\n        return \"st\";\n    }\n    else if (data === 2 || data === 22) {\n        return \"nd\"\n    }\n    else if (data === 3 || data === 23) {\n        return \"rd\"\n    }\n    else {\n        return \"th\"\n    }\n}\n\n/*\n * This function mask account no or mobile no.\n * Number of digit remains same in output with only last four digit visibale\n * @param {*} accountId \n * @returns \n */\nexport function maskAccountId(accountId) {\n    if (accountId) { /** Condition will only executes if accountId is *not* undefined, null, empty, false or 0*/\n        const accountIdlength = accountId.length;\n        const maskedLength = accountIdlength - 5; /** Modify the length as per your wish */\n        let newString = accountId;\n        for (let i = 0; i < accountIdlength; i++) {\n            if (i < maskedLength) {\n                newString = newString.replace(accountId[i], 'X');\n            }\n        }\n        return newString;\n    } else return /**Will handle if no string is passed */\n}\n\nexport function dateSeperated(resData) {\n    let expDateArr;\n    expDateArr = expDateArr = resData.split(\"-\");\n    return `${expDateArr[1].charAt(0).toUpperCase() + expDateArr[1].substring(1)} ${expDateArr[0]}, ${expDateArr[2].length < 4 ? \"20\" : \"\"}${expDateArr[2]}`\n}\n\nexport function getLanguageFromCode(lanCode = 'en-IN') {\n    if (lanCode) {\n        return languageWithCode[lanCode];\n    } else return languageWithCode['en-IN']\n}"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,4BAA4B;AAC7D;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,IAAI,EAAE;EAC9BC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACC,KAAK,CAACC,OAAO,GAAGJ,IAAI,KAAK,IAAI,GAAG,OAAO,GAAG,MAAM;AACzF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,SAASA,CAACC,KAAK,EAAE;EAC7B,MAAMN,IAAI,GAAGO,MAAM,CAACD,KAAK,CAAC;EAC1B,IAAIN,IAAI,KAAK,CAAC,IAAIA,IAAI,KAAK,EAAE,IAAIA,IAAI,KAAK,EAAE,EAAE;IAC1C,OAAO,IAAI;EACf,CAAC,MACI,IAAIA,IAAI,KAAK,CAAC,IAAIA,IAAI,KAAK,EAAE,EAAE;IAChC,OAAO,IAAI;EACf,CAAC,MACI,IAAIA,IAAI,KAAK,CAAC,IAAIA,IAAI,KAAK,EAAE,EAAE;IAChC,OAAO,IAAI;EACf,CAAC,MACI;IACD,OAAO,IAAI;EACf;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,aAAaA,CAACC,SAAS,EAAE;EACrC,IAAIA,SAAS,EAAE;IAAE;IACb,MAAMC,eAAe,GAAGD,SAAS,CAACE,MAAM;IACxC,MAAMC,YAAY,GAAGF,eAAe,GAAG,CAAC,CAAC,CAAC;IAC1C,IAAIG,SAAS,GAAGJ,SAAS;IACzB,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,eAAe,EAAEI,CAAC,EAAE,EAAE;MACtC,IAAIA,CAAC,GAAGF,YAAY,EAAE;QAClBC,SAAS,GAAGA,SAAS,CAACE,OAAO,CAACN,SAAS,CAACK,CAAC,CAAC,EAAE,GAAG,CAAC;MACpD;IACJ;IACA,OAAOD,SAAS;EACpB,CAAC,MAAM,OAAM,CAAC;AAClB;AAEA,OAAO,SAASG,aAAaA,CAACC,OAAO,EAAE;EACnC,IAAIC,UAAU;EACdA,UAAU,GAAGA,UAAU,GAAGD,OAAO,CAACE,KAAK,CAAC,GAAG,CAAC;EAC5C,OAAQ,GAAED,UAAU,CAAC,CAAC,CAAC,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGH,UAAU,CAAC,CAAC,CAAC,CAACI,SAAS,CAAC,CAAC,CAAE,IAAGJ,UAAU,CAAC,CAAC,CAAE,KAAIA,UAAU,CAAC,CAAC,CAAC,CAACP,MAAM,GAAG,CAAC,GAAG,IAAI,GAAG,EAAG,GAAEO,UAAU,CAAC,CAAC,CAAE,EAAC;AAC5J;AAEA,OAAO,SAASK,mBAAmBA,CAACC,OAAO,GAAG,OAAO,EAAE;EACnD,IAAIA,OAAO,EAAE;IACT,OAAO1B,gBAAgB,CAAC0B,OAAO,CAAC;EACpC,CAAC,MAAM,OAAO1B,gBAAgB,CAAC,OAAO,CAAC;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"module"}